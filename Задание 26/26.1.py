# 2. Тип 26 № 59853
# В морском порту готовятся к перевозке грузов разной массы и формы, для этого каждый груз помещают в отдельный
# контейнер. Контейнеры имеют разную грузоподъемность (некоторые контейнеры могут иметь одинаковую грузоподъёмность).
# Из-за компьютерного сбоя из общего количества контейнеров для перевозки выделили первые попавшиеся
# контейнеры. Напишите программу, которая поможет посчитать максимальное количество грузов, которое можно отправить
# в выделенных контейнерах, и максимальную массу одного отправленного груза.
# Формат входных данных.
# В первой строке входного файла находится число N — количество грузов, совпадающее с выделенным количеством
# контейнеров (натуральное число, не превышающее 20 000). Каждая из следующих N строк содержит два натуральных
# числа, не превышающих 100 000: массу груза и максимальную грузоподъёмность контейнера.
# Формат выходных данных.
# Два целых неотрицательных числа: максимальное количество грузов, которое можно отправить в выделенных контейнерах
# и максимальную массу одного отправленного груза.
# Входные данные.
# Задание 26
# В первой строке входного файла находится число N — количество грузов и количество контейнеров на складе
# (натуральное число, не превышающее 20 000). Каждая из следующих N строк содержит два натуральных числа,
# не превышающих 100 000: массу груза и максимальную массу груза, который можно поместить в контейнер.
# Выходные данные.
# Два целых неотрицательных числа: максимальное число грузов и максимальную массу груза.
# Типовой пример организации входных данных:
# 7
# 10 50
# 20 60
# 70 20
# 40 20
# 50 10
# 10 10
# 20 15
# Для приведённого примера ответом является пара чисел: 6; 50.


def max_cargo_and_weight(file):
        f = open(file)
        n = int(f.readline())

        containers = []
        for q in range(n):
            mass = f[q]
            capacity = f[q+1]
            containers.append((mass, capacity))

        count = 0
        max_sent = 0

        for mass, capacity in containers:
            if mass <= capacity:
                count += 1
                max_sent = max(max_sent, mass)

        return count, max_sent

file = '26.1.txt'
result = max_cargo_and_weight(file)
print(result[0], result[1])


